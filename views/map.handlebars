<h2 class="text-center mb-4">Landslide Map</h2>

<!-- Filter Form with better styling and vertical alignment -->
<div class="row justify-content-center mb-4">
    <form id="filterForm" class="col-12 col-md-6">
        <div class="mb-3">
            <!-- Start Date -->
            <label for="startDate" class="form-label">Start Date</label>
            <input type="date" class="form-control" id="startDate" />
        </div>
        <div class="mb-3">
            <!-- End Date -->
            <label for="endDate" class="form-label">End Date</label>
            <input type="date" class="form-control" id="endDate" />
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-primary" type="submit">Filter</button>
        </div>
    </form>
</div>

<!-- Map container -->
<div id="map" style="height: 500px;"></div>

<!-- Landslide count display -->
<div id="landslideCount" class="text-center mt-3">
    <strong>Number of landslides: <span id="landslideCountValue">0</span></strong>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Set default date values for the filter
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');

    // Get today's date and one month ago
    const today = new Date();
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(today.getMonth() - 1);

    // Format the dates to YYYY-MM-DD
    const formatDate = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Add leading zero if needed
        const day = String(date.getDate()).padStart(2, '0'); // Add leading zero if needed
        return `${year}-${month}-${day}`;
    };

    // Set default values for start date and end date
    startDateInput.value = formatDate(oneMonthAgo);
    endDateInput.value = formatDate(today);

    const map = L.map('map').setView([46.8182, 8.2275], 8);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    const markerLayer = L.layerGroup().addTo(map);

    // Function to load landslides based on date range
    const loadLandslides = async (startDate, endDate) => {
        markerLayer.clearLayers();  // Clear previous markers

        const response = await fetch(`/api/landslides?startDate=${startDate}&endDate=${endDate}`);
        const landslides = await response.json();

        // Update the landslide count text
        const landslideCount = landslides.length;
        document.getElementById('landslideCountValue').textContent = landslideCount;

        landslides.forEach(({ lat, lon, volume, uuid, description }) => {
            const popupContent = `
                <div id="popUpContent">
                    <strong>Landslide ID:</strong> ${uuid}<br/>
                    <strong>Volume:</strong> ${volume}mÂ³<br/>
                    <a href="/landslide/view/${uuid}">View Details</a>
                </div>
            `;

            const marker = L.marker([lat, lon])
                .addTo(markerLayer)
                .bindPopup(popupContent);

            // Add click event to redirect
            marker.on('click', () => {
                window.location.href = `/landslide/${uuid}`;
            });

            let popupOpen = false;

            // Open popup on hover
            marker.on('mouseover', () => {
                marker.openPopup();
                popupOpen = true;
            });

            // Close the popup with delay if the mouse leaves the marker or the popup content
            marker.on('mouseout', (e) => {
                if (!e.relatedTarget || !e.relatedTarget.closest('.leaflet-popup')) {
                    setTimeout(() => {
                        if (!popupOpen) {
                            marker.closePopup();
                        }
                    }, 300);  // 300ms delay before closing
                }
            });
            
            // Close popup when the mouse leaves the popup content
            marker.getPopup().on('mouseout', (e) => {
                    if (!e.relatedTarget || !e.relatedTarget.closest('.leaflet-marker-icon')) {
                        marker.closePopup();
                    }
            });

            // Keep track of whether the popup is open to prevent immediate closure
            marker.getPopup().on('mouseover', () => {
                popupOpen = true;
            });
        });
    };

    // Load landslides with the default date range
    loadLandslides(startDateInput.value, endDateInput.value);

    // Handle form submission to filter the landslides by selected date range
    const form = document.getElementById('filterForm');
    form.addEventListener('submit', (e) => {
        e.preventDefault();

        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;

        loadLandslides(startDate, endDate); // Load landslides based on the selected date range
    });
});
</script>
